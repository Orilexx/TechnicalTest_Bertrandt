//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Character.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Character : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Character()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Character"",
    ""maps"": [
        {
            ""name"": ""CharacterC"",
            ""id"": ""5a93847e-3b67-4e69-a8e4-fdecc09c970c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1722c017-ef1f-489d-9067-e14397346fdc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""8a3aad39-498d-4498-ba8e-0ea656b55917"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""408a3f4e-0d73-45fa-ab65-9a9386efacbe"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1bb5677-2286-4980-ac12-add684e04b81"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterC
        m_CharacterC = asset.FindActionMap("CharacterC", throwIfNotFound: true);
        m_CharacterC_Move = m_CharacterC.FindAction("Move", throwIfNotFound: true);
        m_CharacterC_Look = m_CharacterC.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterC
    private readonly InputActionMap m_CharacterC;
    private ICharacterCActions m_CharacterCActionsCallbackInterface;
    private readonly InputAction m_CharacterC_Move;
    private readonly InputAction m_CharacterC_Look;
    public struct CharacterCActions
    {
        private @Character m_Wrapper;
        public CharacterCActions(@Character wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CharacterC_Move;
        public InputAction @Look => m_Wrapper.m_CharacterC_Look;
        public InputActionMap Get() { return m_Wrapper.m_CharacterC; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterCActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterCActions instance)
        {
            if (m_Wrapper.m_CharacterCActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_CharacterCActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CharacterCActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CharacterCActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_CharacterCActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_CharacterCActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_CharacterCActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_CharacterCActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public CharacterCActions @CharacterC => new CharacterCActions(this);
    public interface ICharacterCActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
